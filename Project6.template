{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "TestVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsHostnames" : "true", 
				"EnableDnsSupport" : "true",
				"Tags" : [ {"Key" : "Name", "Value" : "TestVPC"} ]
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "TestVPC"
                },
                "Tags" : [ {"Key" : "Name", "Value" : "Subnet1"} ],
                "CidrBlock" : "10.0.1.0/24",
      			"AvailabilityZone" : "us-east-1a",
      			"MapPublicIpOnLaunch" : "true"
            }
        },
        "TestSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
            	"SecurityGroupIngress" : [{
         			"IpProtocol" : "tcp",
         			"FromPort" : 22,
         			"ToPort" : 22,
         			"CidrIp" : "0.0.0.0/0"
      			}],
                "VpcId": {
                    "Ref": "TestVPC"
                },
                "GroupDescription": "Allows SSH",
                "Tags" : [ {"Key" : "Name", "Value" : "TestSG"} ]
            }
        },
        "Project6ec2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
            	"InstanceType" : "t2.micro",
            	"ImageId" : "ami-007855ac798b5175e",
                "KeyName" : "testkey",
                "NetworkInterfaces": [{
					"SubnetId": {
						"Ref": "Subnet1"
					},
					"GroupSet": [{ "Ref" : "TestSG" }],
					"DeviceIndex": "0",
					"DeleteOnTermination": "true"
				}],
                "Tags" : [ {"Key" : "Name", "Value" : "Project6ec2"} ]
            }
        },
		"TestIG": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags" : [ {"Key" : "Name", "Value" : "TestIG"} ]            
			}
		},
        "RouteTable1" : {
   			"Type" : "AWS::EC2::RouteTable",
   			"Properties" : {
      			"VpcId" : { "Ref" : "TestVPC" },
      			"Tags" : [ {"Key" : "Name", "Value" : "RouteTable1"} ]
     		}
   		},
   		"myRoute1" : {
   			"Type" : "AWS::EC2::Route",
   			"Properties" : {
      			"RouteTableId" : { "Ref" : "RouteTable1" },
      			"DestinationCidrBlock" : "0.0.0.0/0",
      			"GatewayId" : { "Ref" : "TestIG" }
   			}
		},
		"mySubnetRouteTableAssociation1" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "Subnet1" },
				"RouteTableId" : { "Ref" : "RouteTable1" }
			}
		},
   		"IGAttachment" : {
  			"Type" : "AWS::EC2::VPCGatewayAttachment",
  			"Properties" : {
      		"InternetGatewayId" : { "Ref" : "TestIG"},
      		"VpcId" : { "Ref" : "TestVPC"}
    		}
		},
		
		
		
        
		"DynamoDB" : {
  			"Type" : "AWS::DynamoDB::Table",
  			"Properties" : {
      			"AttributeDefinitions" : [
      			 	{
  						"AttributeName" : "deviceid",
  						"AttributeType" : "S"
					}, 
					{
  						"AttributeName" : "timestamp",
  						"AttributeType" : "S"
					}
      			 ],
      			"KeySchema" : [
      				{
                        "AttributeName": "deviceid",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                    }
                ],
      			"TableName" : "m03p02_anomaly_data",
      			"Tags" : [ {"Key" : "Name", "Value" : "m03p02_anomaly_data"} ],
      			"ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
    		}
		},
		
		
		
		
		
		"MyStream": {
			"Type": "AWS::Kinesis::Stream",
			"Properties": {
				"Name": "m03p02_raw_data_stream",
				"RetentionPeriodHours" : 24,
				"ShardCount": 4
			}
		},
		
		
		
		
		
		"MySNSTopic" : {
			"Type" : "AWS::SNS::Topic",
			"Properties" : {
				"Subscription" : [{
				  "Endpoint" : "santhoshkumar.d89@gmail.com",
				  "Protocol" : "email"
				}],
				"TopicName" : "m03p02_anomaly_alerts"
			}
		},
		
		
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": "project620230504"
            }
        },
		
		
        "LambdaFunResource": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "Project6Lambda",
                
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                
                                "from pprint import pprint",
								"import boto3",
								"import json",
								"import csv",
								"import datetime",
								"import os",
								"import random",
								"import base64",
								"from decimal import Decimal",
								"from botocore.exceptions import ClientError",
								"",
								"",
								"def lambda_handler(event, context):",
								"    ",
								"    AWS_REGION = 'us-east-1'",
								"    #print(event)",
								"    ",
								"    dynamodb_res = boto3.resource('dynamodb', region_name=AWS_REGION)",
								"    anomaly_table = dynamodb_res.Table('m03p02_anomaly_data')",
								"",
								"    sns_client = boto3.client('sns', region_name=AWS_REGION)",
								"    topic_arn = \"arn:aws:sns:us-east-1:195039156226:m03p02_anomaly_alerts\"",
								"",
								"    for record in event['Records']:",
								"        data_point = base64.b64decode(record['kinesis']['data'])",
								"        data_point = str(data_point, 'utf-8')",
								"        pprint(data_point, sort_dicts=False)",
								"        data_point = json.loads(data_point)",
								"",
								"        anomaly_type = {}",
								"",
								"        if data_point[\"value\"] <= (1.1 * float(data_point['lowest_temp'])):",
								"            anomaly_type = \"Cold\"",
								"        elif data_point[\"value\"] >= (0.9 * float(data_point['highest_point'])):",
								"            anomaly_type = \"Hot\"",
								"",
								"        anomaly_data = {'deviceid': data_point[\"deviceid\"], ",
								"                            'anomalyDate': data_point[\"date\"], ",
								"                            'timestamp': data_point[\"timestamp\"], ",
								"                            'value': data_point[\"value\"],",
								"                            'anomalyType': anomaly_type}",
								"        ",
								"        anomaly_data = json.loads(json.dumps(anomaly_data), parse_float=Decimal)",
								"        response = anomaly_table.put_item(Item=anomaly_data)",
								"        #pprint(\"DB Response Data: \", response)",
								"        sns_client.publish(TopicArn=topic_arn, ",
								"                            Message=str(\"Anomaly value = \" + str(anomaly_data['value']) + \" is detected. \" + \"Detcted temperature can be categorized as \" + anomaly_data['anomalyType']) , ",
								"                            Subject=str(anomaly_data['anomalyType'] + \" temperature is detected.\")",
								"                            )",
								"    return 1"
								
                            ]
                        ]
                    }
                },
                "Description": "Used to run job",
                "Handler": "index.lambda_handler",
				
                "Role": "arn:aws:iam::195039156226:role/LambdaRoleAll",
                "Runtime": "python3.8",
                "Timeout": 120
            }
        }
		
		
		
		
    }
}